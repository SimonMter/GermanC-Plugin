{
    "Integer Declaration": {
        "prefix": "ganzzahl",
        "body": ["ganzzahl ${1:variableName} = ${2:value};"],
        "description": "Declare an integer variable"
    },
    "Character Declaration": {
        "prefix": "zeichen",
        "body": ["zeichen ${1:variableName} = '${2:char}';"],
        "description": "Declare a character variable"
    },
    "Return Statement": {
        "prefix": "zurück",
        "body": ["zurück ${1:value};"],
        "description": "Return a value"
    },
    "If Statement": {
        "prefix": "wenn",
        "body": [
            "wenn (${1:condition}) {",
            "    ${2:// code}",
            "}"
        ],
        "description": "If statement"
    },
    "Else Statement": {
        "prefix": "sonst",
        "body": [
            "sonst {",
            "    ${1:// code}",
            "}"
        ],
        "description": "Else statement"
    },
    "While Loop": {
        "prefix": "während",
        "body": [
            "während (${1:condition}) {",
            "    ${2:// code}",
            "}"
        ],
        "description": "While loop"
    },
    "For Loop": {
        "prefix": "für",
        "body": [
            "für (${1:ganzzahl i = 0}; ${2:i < n}; ${3:i++}) {",
            "    ${4:// code}",
            "}"
        ],
        "description": "For loop"
    },
    "Void Function": {
        "prefix": "leer",
        "body": [
            "leer ${1:functionName}(${2:parameters}) {",
            "    ${3:// code}",
            "}"
        ],
        "description": "Void function"
    },
    "Main Function": {
        "prefix": "haupt",
        "body": [
            "ganzzahl haupt() {",
            "    ${1:// code}",
            "    zurück 0;",
            "}"
        ],
        "description": "Main function"
    },
    "Break Statement": {
        "prefix": "breche",
        "body": ["breche;"],
        "description": "Break statement"
    },
    "Continue Statement": {
        "prefix": "fortsetzen",
        "body": ["fortsetzen;"],
        "description": "Continue statement"
    },
    "Float Declaration": {
        "prefix": "fließkommazahl",
        "body": ["fließkommazahl ${1:variableName} = ${2:value};"],
        "description": "Declare a float variable"
    },
    "Double Declaration": {
        "prefix": "doppelt",
        "body": ["doppelt ${1:variableName} = ${2:value};"],
        "description": "Declare a double variable"
    },
    "Long Declaration": {
        "prefix": "lang",
        "body": ["lang ${1:variableName} = ${2:value};"],
        "description": "Declare a long variable"
    },
    "Short Declaration": {
        "prefix": "kurz",
        "body": ["kurz ${1:variableName} = ${2:value};"],
        "description": "Declare a short variable"
    },
    "Equality Check": {
        "prefix": "gleich",
        "body": ["gleich"],
        "description": "Equality check"
    },
    "Not Equal Check": {
        "prefix": "nicht_gleich",
        "body": ["nicht_gleich"],
        "description": "Not equal check"
    },
    "Greater Than Check": {
        "prefix": "größer",
        "body": ["größer"],
        "description": "Greater than check"
    },
    "Less Than Check": {
        "prefix": "kleiner",
        "body": ["kleiner"],
        "description": "Less than check"
    },
    "Greater or Equal Check": {
        "prefix": "größer_oder_gleich",
        "body": ["größer_oder_gleich"],
        "description": "Greater or equal check"
    },
    "Less or Equal Check": {
        "prefix": "kleiner_oder_gleich",
        "body": ["kleiner_oder_gleich"],
        "description": "Less or equal check"
    },
    "Logical AND": {
        "prefix": "und",
        "body": ["und"],
        "description": "Logical AND"
    },
    "Logical OR": {
        "prefix": "oder",
        "body": ["oder"],
        "description": "Logical OR"
    },
    "Logical NOT": {
        "prefix": "nicht",
        "body": ["nicht"],
        "description": "Logical NOT"
    },
    "Print Function": {
        "prefix": "drucke",
        "body": ["drucke(\"${1:message}\");"],
        "description": "Print function (printf)"
    },
    "Scan Function": {
        "prefix": "scanner",
        "body": ["scanner(\"${1:format}\", &${2:variable});"],
        "description": "Scan function (scanf)"
    },
    "Get Character": {
        "prefix": "hole",
        "body": ["hole();"],
        "description": "Get character (getchar)"
    },
    "True Constant": {
        "prefix": "wahr",
        "body": ["wahr"],
        "description": "Boolean true constant"
    },
    "False Constant": {
        "prefix": "falsch",
        "body": ["falsch"],
        "description": "Boolean false constant"
    },
    "Null Constant": {
        "prefix": "null",
        "body": ["null"],
        "description": "Null constant"
    },
    "Const Keyword": {
        "prefix": "konstant",
        "body": ["konstant ${1:variableName} = ${2:value};"],
        "description": "Declare a constant variable"
    },
    "Extern Keyword": {
        "prefix": "extern",
        "body": ["extern ${1:type} ${2:variableName};"],
        "description": "Extern variable declaration"
    },
    "Static Keyword": {
        "prefix": "statisch",
        "body": ["statisch ${1:type} ${2:variableName} = ${3:value};"],
        "description": "Static variable declaration"
    },
    "String Keyword": {
        "prefix": "zeichenfolge",
        "body": ["zeichenfolge ${1:variableName} = \"${2:value}\";"],
        "description": "String declaration"
    },
    "Include Directive": {
        "prefix": "einschließen",
        "body": ["#einschließen <${1:header.h}>"],
        "description": "Include a header file"
    },
    "Define Directive": {
        "prefix": "definieren",
        "body": ["#definieren ${1:MACRO} ${2:value}"],
        "description": "Define a macro"
    },
    "Struct Keyword": {
        "prefix": "strukturen",
        "body": [
            "strukturen ${1:StructName} {",
            "    ${2:// members}",
            "};"
        ],
        "description": "Define a struct"
    },
    "Union Keyword": {
        "prefix": "union",
        "body": [
            "union ${1:UnionName} {",
            "    ${2:// members}",
            "};"
        ],
        "description": "Define a union"
    },
    "Enum Keyword": {
        "prefix": "enum",
        "body": [
            "enum ${1:EnumName} {",
            "    ${2:// values}",
            "};"
        ],
        "description": "Define an enum"
    },
    "Typedef Keyword": {
        "prefix": "typedef",
        "body": ["typedef ${1:existingType} ${2:newType};"],
        "description": "Define a typedef"
    },
    "Volatile Keyword": {
        "prefix": "volatile",
        "body": ["volatile ${1:type} ${2:variableName};"],
        "description": "Volatile variable declaration"
    },
    "Register Keyword": {
        "prefix": "register",
        "body": ["register ${1:type} ${2:variableName};"],
        "description": "Register variable declaration"
    },
    "Inline Keyword": {
        "prefix": "inline",
        "body": ["inline ${1:returnType} ${2:functionName}(${3:parameters}) {", "    ${4:// code}", "}"],
        "description": "Inline function definition"
    },
    "Single Line Comment": {
        "prefix": "kommentare",
        "body": ["// ${1:comment}"],
        "description": "Single line comment"
    },
    "Block Comment": {
        "prefix": "kommentare_block",
        "body": ["/* ${1:comment} */"],
        "description": "Block comment"
    },
    "Block Comment End": {
        "prefix": "kommentare_block_ende",
        "body": ["*/"],
        "description": "End of block comment"
    }
}